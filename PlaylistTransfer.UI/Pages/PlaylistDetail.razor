@page "/playlist/{PlaylistName}"
@using PlaylistTransfer.Shared
@using PlaylistTransfer.UI.Data
@inject PlaylistState PlaylistState
@inject HttpClient Http
@inject NavigationManager Navigation

@code {
    [Parameter]
    public string PlaylistName { get; set; }

    private PlaylistItems _playlist = new PlaylistItems(string.Empty, new List<Track>(), string.Empty);

    protected override async Task OnInitializedAsync()
    {
        var playlist = PlaylistState.SelectedPlaylists.FirstOrDefault(p => p.PlaylistName == PlaylistName);
        if (playlist != null)
        {
            _playlist = playlist;
        }
    }

    private void GoBackToPlaylists()
    {
        Navigation.NavigateTo("/playlists");
    }
}

<!-- Back Button as Arrow -->
<div class="back-container">
    <button class="back-button" @onclick="GoBackToPlaylists">
        &#x2190; <!-- Unicode for left arrow -->
    </button>
</div>

<!-- Playlist Details -->
<div class="playlist-container">
    <h3>@_playlist.PlaylistName</h3>
    <img src="@_playlist.Image" alt="@_playlist.PlaylistName" class="playlist-image" />
</div>


<div class="song-grid">
    @foreach (var track in _playlist.Tracks)
    {
        <div class="song-card">
            @if (!string.IsNullOrEmpty(track.SongAlbum))
            {
                <img src="@track.SongAlbum" alt="Album Cover" class="song-image"/>
            }
            <a href="@track.TrackUrl" target="_blank" class="song-link">@track.TrackName</a>
        </div>
    }
</div>
